//For phase_3
(gdb) b phase_3
Breakpoint 2 at 0x400f15
(gdb) r
Starting program: /mnt/c/Users/user/Desktop/Assignment 1/bomb003/bomb
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Border relations with Canada have never been better.
Phase 1 defused. How about the next one?
0 1 1 2 3 5
That's number 2.  Keep going!
2 42 // random input as we don't know the exact answer for phase_3

Breakpoint 2, 0x0000000000400f15 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
=> 0x0000000000400f15 <+0>:     sub    $0x18,%rsp
   0x0000000000400f19 <+4>:     mov    %fs:0x28,%rax
   0x0000000000400f22 <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000400f27 <+18>:    xor    %eax,%eax
   0x0000000000400f29 <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000400f2e <+25>:    mov    %rsp,%rdx
   0x0000000000400f31 <+28>:    mov    $0x4025af,%esi //some value is being moved here
   0x0000000000400f36 <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt> // It's a function that takes an input
   0x0000000000400f3b <+38>:    cmp    $0x1,%eax //Comparing 1 with the result from input. "cmp" here means compare
   0x0000000000400f3e <+41>:    jg     0x400f45 <phase_3+48> //if %eax > 1, jump pass the <explode_bomb>. "jg" here means jump if greater.
   0x0000000000400f40 <+43>:    callq  0x40142a <explode_bomb>
   0x0000000000400f45 <+48>:    cmpl   $0x7,(%rsp) //comparing 7 with the value in %rsp
   0x0000000000400f49 <+52>:    ja     0x400f86 <phase_3+113> //jump if the value is above 7. "ja" means jump if above.
   0x0000000000400f4b <+54>:    mov    (%rsp),%eax //moved rsp to eax
   0x0000000000400f4e <+57>:    jmpq   *0x402420(,%rax,8)
   0x0000000000400f55 <+64>:    mov    $0xc6,%eax
   0x0000000000400f5a <+69>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f5c <+71>:    mov    $0x31e,%eax
   0x0000000000400f61 <+76>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f63 <+78>:    mov    $0x299,%eax
   0x0000000000400f68 <+83>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f6a <+85>:    mov    $0x3a,%eax
   0x0000000000400f6f <+90>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f71 <+92>:    mov    $0x270,%eax
   0x0000000000400f76 <+97>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f78 <+99>:    mov    $0x10b,%eax
   0x0000000000400f7d <+104>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f7f <+106>:   mov    $0x80,%eax
   0x0000000000400f84 <+111>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f86 <+113>:   callq  0x40142a <explode_bomb>
   0x0000000000400f8b <+118>:   mov    $0x0,%eax
   0x0000000000400f90 <+123>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f92 <+125>:   mov    $0x3f,%eax
   0x0000000000400f97 <+130>:   cmp    0x4(%rsp),%eax //compares $rsp+4 to $eax
   0x0000000000400f9b <+134>:   je     0x400fa2 <phase_3+141>
   0x0000000000400f9d <+136>:   callq  0x40142a <explode_bomb>
   0x0000000000400fa2 <+141>:   mov    0x8(%rsp),%rax
   0x0000000000400fa7 <+146>:   xor    %fs:0x28,%rax
   0x0000000000400fb0 <+155>:   je     0x400fb7 <phase_3+162>
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400fb2 <+157>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fb7 <+162>:   add    $0x18,%rsp
   0x0000000000400fbb <+166>:   retq
End of assembler dump.
//To see what is being moved in below's address
(gdb) u*0x0000000000400f31
0x0000000000400f31 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f15 <+0>:     sub    $0x18,%rsp
   0x0000000000400f19 <+4>:     mov    %fs:0x28,%rax
   0x0000000000400f22 <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000400f27 <+18>:    xor    %eax,%eax
   0x0000000000400f29 <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000400f2e <+25>:    mov    %rsp,%rdx
=> 0x0000000000400f31 <+28>:    mov    $0x4025af,%esi
   0x0000000000400f36 <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f3b <+38>:    cmp    $0x1,%eax
   0x0000000000400f3e <+41>:    jg     0x400f45 <phase_3+48>
   0x0000000000400f40 <+43>:    callq  0x40142a <explode_bomb>
   0x0000000000400f45 <+48>:    cmpl   $0x7,(%rsp)
   0x0000000000400f49 <+52>:    ja     0x400f86 <phase_3+113>
   0x0000000000400f4b <+54>:    mov    (%rsp),%eax
   0x0000000000400f4e <+57>:    jmpq   *0x402420(,%rax,8)
   0x0000000000400f55 <+64>:    mov    $0xc6,%eax
   0x0000000000400f5a <+69>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f5c <+71>:    mov    $0x31e,%eax
   0x0000000000400f61 <+76>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f63 <+78>:    mov    $0x299,%eax
   0x0000000000400f68 <+83>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f6a <+85>:    mov    $0x3a,%eax
   0x0000000000400f6f <+90>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f71 <+92>:    mov    $0x270,%eax
   0x0000000000400f76 <+97>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f78 <+99>:    mov    $0x10b,%eax
   0x0000000000400f7d <+104>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f7f <+106>:   mov    $0x80,%eax
   0x0000000000400f84 <+111>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f86 <+113>:   callq  0x40142a <explode_bomb>
   0x0000000000400f8b <+118>:   mov    $0x0,%eax
   0x0000000000400f90 <+123>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f92 <+125>:   mov    $0x3f,%eax
   0x0000000000400f97 <+130>:   cmp    0x4(%rsp),%eax
   0x0000000000400f9b <+134>:   je     0x400fa2 <phase_3+141>
   0x0000000000400f9d <+136>:   callq  0x40142a <explode_bomb>
   0x0000000000400fa2 <+141>:   mov    0x8(%rsp),%rax
   0x0000000000400fa7 <+146>:   xor    %fs:0x28,%rax
   0x0000000000400fb0 <+155>:   je     0x400fb7 <phase_3+162>
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400fb2 <+157>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fb7 <+162>:   add    $0x18,%rsp
   0x0000000000400fbb <+166>:   retq
End of assembler dump.

// we take hexa value to check what is being moved:
(gdb) x/s 0x4025af 
0x4025af:       "%d %d" // From here we get to know that in phase_3 the input should be in integer type
(gdb) u*0x0000000000400f3b
0x0000000000400f3b in phase_3 ()

// So, "$0x1,%eax", 1 is being compared to %eax, so to see what is in %eax:
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f15 <+0>:     sub    $0x18,%rsp
   0x0000000000400f19 <+4>:     mov    %fs:0x28,%rax
   0x0000000000400f22 <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000400f27 <+18>:    xor    %eax,%eax
   0x0000000000400f29 <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000400f2e <+25>:    mov    %rsp,%rdx
   0x0000000000400f31 <+28>:    mov    $0x4025af,%esi
   0x0000000000400f36 <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
=> 0x0000000000400f3b <+38>:    cmp    $0x1,%eax
   0x0000000000400f3e <+41>:    jg     0x400f45 <phase_3+48>
   0x0000000000400f40 <+43>:    callq  0x40142a <explode_bomb>
   0x0000000000400f45 <+48>:    cmpl   $0x7,(%rsp)
   0x0000000000400f49 <+52>:    ja     0x400f86 <phase_3+113>
   0x0000000000400f4b <+54>:    mov    (%rsp),%eax
   0x0000000000400f4e <+57>:    jmpq   *0x402420(,%rax,8)
   0x0000000000400f55 <+64>:    mov    $0xc6,%eax
   0x0000000000400f5a <+69>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f5c <+71>:    mov    $0x31e,%eax
   0x0000000000400f61 <+76>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f63 <+78>:    mov    $0x299,%eax
   0x0000000000400f68 <+83>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f6a <+85>:    mov    $0x3a,%eax
   0x0000000000400f6f <+90>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f71 <+92>:    mov    $0x270,%eax
   0x0000000000400f76 <+97>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f78 <+99>:    mov    $0x10b,%eax
   0x0000000000400f7d <+104>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f7f <+106>:   mov    $0x80,%eax
   0x0000000000400f84 <+111>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f86 <+113>:   callq  0x40142a <explode_bomb>
   0x0000000000400f8b <+118>:   mov    $0x0,%eax
   0x0000000000400f90 <+123>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f92 <+125>:   mov    $0x3f,%eax
   0x0000000000400f97 <+130>:   cmp    0x4(%rsp),%eax
   0x0000000000400f9b <+134>:   je     0x400fa2 <phase_3+141>
   0x0000000000400f9d <+136>:   callq  0x40142a <explode_bomb>
   0x0000000000400fa2 <+141>:   mov    0x8(%rsp),%rax
   0x0000000000400fa7 <+146>:   xor    %fs:0x28,%rax
   0x0000000000400fb0 <+155>:   je     0x400fb7 <phase_3+162>
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400fb2 <+157>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fb7 <+162>:   add    $0x18,%rsp
   0x0000000000400fbb <+166>:   retq
End of assembler dump.
(gdb) i r
rax            0x2                 2 //this 2 is being compared to the value 1
rbx            0x4021e0            4202976
rcx            0x0                 0
rdx            0x7ffffffee2f4      140737488282356
rsi            0x0                 0
rdi            0x7ffffffedca0      140737488280736
rbp            0x0                 0x0
rsp            0x7ffffffee2f0      0x7ffffffee2f0
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff74eac0      140737479240384
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee400      140737488282624
r14            0x0                 0
r15            0x0                 0
rip            0x400f3b            0x400f3b <phase_3+38>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0

(gdb) u*0x0000000000400f45
0x0000000000400f45 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f15 <+0>:     sub    $0x18,%rsp
   0x0000000000400f19 <+4>:     mov    %fs:0x28,%rax
   0x0000000000400f22 <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000400f27 <+18>:    xor    %eax,%eax
   0x0000000000400f29 <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000400f2e <+25>:    mov    %rsp,%rdx
   0x0000000000400f31 <+28>:    mov    $0x4025af,%esi
   0x0000000000400f36 <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f3b <+38>:    cmp    $0x1,%eax
   0x0000000000400f3e <+41>:    jg     0x400f45 <phase_3+48>
   0x0000000000400f40 <+43>:    callq  0x40142a <explode_bomb>
=> 0x0000000000400f45 <+48>:    cmpl   $0x7,(%rsp)
   0x0000000000400f49 <+52>:    ja     0x400f86 <phase_3+113>
   0x0000000000400f4b <+54>:    mov    (%rsp),%eax
   0x0000000000400f4e <+57>:    jmpq   *0x402420(,%rax,8)
   0x0000000000400f55 <+64>:    mov    $0xc6,%eax
   0x0000000000400f5a <+69>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f5c <+71>:    mov    $0x31e,%eax
   0x0000000000400f61 <+76>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f63 <+78>:    mov    $0x299,%eax
   0x0000000000400f68 <+83>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f6a <+85>:    mov    $0x3a,%eax
   0x0000000000400f6f <+90>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f71 <+92>:    mov    $0x270,%eax
   0x0000000000400f76 <+97>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f78 <+99>:    mov    $0x10b,%eax
   0x0000000000400f7d <+104>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f7f <+106>:   mov    $0x80,%eax
   0x0000000000400f84 <+111>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f86 <+113>:   callq  0x40142a <explode_bomb>
   0x0000000000400f8b <+118>:   mov    $0x0,%eax
   0x0000000000400f90 <+123>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f92 <+125>:   mov    $0x3f,%eax
   0x0000000000400f97 <+130>:   cmp    0x4(%rsp),%eax
   0x0000000000400f9b <+134>:   je     0x400fa2 <phase_3+141>
   0x0000000000400f9d <+136>:   callq  0x40142a <explode_bomb>
   0x0000000000400fa2 <+141>:   mov    0x8(%rsp),%rax
   0x0000000000400fa7 <+146>:   xor    %fs:0x28,%rax
   0x0000000000400fb0 <+155>:   je     0x400fb7 <phase_3+162>
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400fb2 <+157>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fb7 <+162>:   add    $0x18,%rsp
   0x0000000000400fbb <+166>:   retq
End of assembler dump.

// we see that in "cmpl   $0x7,(%rsp)", 7 is being compared to %rsp, to see whats in %rsp:
(gdb) i r
rax            0x2                 2
rbx            0x4021e0            4202976
rcx            0x0                 0
rdx            0x7ffffffee2f4      140737488282356
rsi            0x0                 0
rdi            0x7ffffffedca0      140737488280736
rbp            0x0                 0x0
rsp            0x7ffffffee2f0      0x7ffffffee2f0 // address of %rsp
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff74eac0      140737479240384
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee400      140737488282624
r14            0x0                 0
r15            0x0                 0
rip            0x400f45            0x400f45 <phase_3+48>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d  0x7ffffffee2f0
0x7ffffffee2f0: 2 // this is the first value, since it is less that 7, it will not call <explode_bomb>

(gdb) u*0x0000000000400f97
0x0000000000400f97 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f15 <+0>:     sub    $0x18,%rsp
   0x0000000000400f19 <+4>:     mov    %fs:0x28,%rax
   0x0000000000400f22 <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000400f27 <+18>:    xor    %eax,%eax
   0x0000000000400f29 <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000400f2e <+25>:    mov    %rsp,%rdx
   0x0000000000400f31 <+28>:    mov    $0x4025af,%esi
   0x0000000000400f36 <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f3b <+38>:    cmp    $0x1,%eax
   0x0000000000400f3e <+41>:    jg     0x400f45 <phase_3+48>
   0x0000000000400f40 <+43>:    callq  0x40142a <explode_bomb>
   0x0000000000400f45 <+48>:    cmpl   $0x7,(%rsp)
   0x0000000000400f49 <+52>:    ja     0x400f86 <phase_3+113>
   0x0000000000400f4b <+54>:    mov    (%rsp),%eax
   0x0000000000400f4e <+57>:    jmpq   *0x402420(,%rax,8)
   0x0000000000400f55 <+64>:    mov    $0xc6,%eax
   0x0000000000400f5a <+69>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f5c <+71>:    mov    $0x31e,%eax
   0x0000000000400f61 <+76>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f63 <+78>:    mov    $0x299,%eax
   0x0000000000400f68 <+83>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f6a <+85>:    mov    $0x3a,%eax
   0x0000000000400f6f <+90>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f71 <+92>:    mov    $0x270,%eax
   0x0000000000400f76 <+97>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f78 <+99>:    mov    $0x10b,%eax
   0x0000000000400f7d <+104>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f7f <+106>:   mov    $0x80,%eax
   0x0000000000400f84 <+111>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f86 <+113>:   callq  0x40142a <explode_bomb>
   0x0000000000400f8b <+118>:   mov    $0x0,%eax
   0x0000000000400f90 <+123>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f92 <+125>:   mov    $0x3f,%eax
=> 0x0000000000400f97 <+130>:   cmp    0x4(%rsp),%eax %eax                 //we see here that %rsp is compared with %eax.
   0x0000000000400f9b <+134>:   je     0x400fa2 <phase_3+141>
   0x0000000000400f9d <+136>:   callq  0x40142a <explode_bomb>
   0x0000000000400fa2 <+141>:   mov    0x8(%rsp),%rax
   0x0000000000400fa7 <+146>:   xor    %fs:0x28,%rax
   0x0000000000400fb0 <+155>:   je     0x400fb7 <phase_3+162>
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400fb2 <+157>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fb7 <+162>:   add    $0x18,%rsp
   0x0000000000400fbb <+166>:   retq
End of assembler dump.
(gdb) i r
rax            0x31e               798 //this is our second answer since %eax is same as %rax in 64 bit.
rbx            0x4021e0            4202976
rcx            0x0                 0
rdx            0x7ffffffee2f4      140737488282356
rsi            0x0                 0
rdi            0x7ffffffedca0      140737488280736
rbp            0x0                 0x0
rsp            0x7ffffffee2f0      0x7ffffffee2f0
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff74eac0      140737479240384
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee400      140737488282624
r14            0x0                 0
r15            0x0                 0
rip            0x400f97            0x400f97 <phase_3+130>
eflags         0x293               [ CF AF SF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d 0x7ffffffee2f0
0x7ffffffee2f0: 2

So, First integer = 2
second integer = 798


(gdb) d
Delete all breakpoints? (y or n) y
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /mnt/c/Users/user/Desktop/Assignment 1/bomb003/bomb
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Border relations with Canada have never been better.
Phase 1 defused. How about the next one?
0 1 1 2 3 5
That's number 2.  Keep going!
2 798
Halfway there!

