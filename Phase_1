ugyen@DESKTOP-I4JK545:/mnt/c/Users/user/Desktop/Ugyen Lhamo/ITS304/Bomb LAB/Assignment 1/Assignment 1/bomb003$ gdb bomb                                                     GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2                                                                                                                                     Copyright (C) 2020 Free Software Foundation, Inc.                                                                                                                           License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>                                                                                               This is free software: you are free to change and redistribute it.                                                                                                          There is NO WARRANTY, to the extent permitted by law.                                                                                                                       Type "show copying" and "show warranty" for details.                                                                                                                        This GDB was configured as "x86_64-linux-gnu".                                                                                                                              Type "show configuration" for configuration details.                                                                                                                        For bug reporting instructions, please see:                                                                                                                                 <http://www.gnu.org/software/gdb/bugs/>.                                                                                                                                    Find the GDB manual and other documentation resources online at:                                                                                                                <http://www.gnu.org/software/gdb/documentation/>.                                                                                                                                                                                                                                                                                                   For help, type "help".                                                                                                                                                      Type "apropos word" to search for commands related to "word"...                                                                                                             Reading symbols from bomb...                                                                                                                                                (gdb) b phase_1                                                                                                                                                             Breakpoint 1 at 0x400e8d                                                                                                                                                    (gdb) r                                                                                                                                                                     Starting program: /mnt/c/Users/user/Desktop/Ugyen Lhamo/ITS304/Bomb LAB/Assignment 1/Assignment 1/bomb003/bomb                                                              Welcome to my fiendish little bomb. You have 6 phases with                                                                                                                  which to blow yourself up. Have a nice day!                                                                                                                                 test                                                                                                                                                                                                                                                                                                                                                    Breakpoint 1, 0x0000000000400e8d in phase_1 ()                                                                                                                              (gdb) disas                                                                                                                                                                 Dump of assembler code for function phase_1:                                                                                                                                => 0x0000000000400e8d <+0>:     sub    $0x8,%rsp                                                                                                                               0x0000000000400e91 <+4>:     mov    $0x4023b0,%esi                                                                                                                          0x0000000000400e96 <+9>:     callq  0x40132b <strings_not_equal>                                                                                                            0x0000000000400e9b <+14>:    test   %eax,%eax                                                                                                                               0x0000000000400e9d <+16>:    je     0x400ea4 <phase_1+23>                                                                                                                   0x0000000000400e9f <+18>:    callq  0x40142a <explode_bomb>                                                                                                                 0x0000000000400ea4 <+23>:    add    $0x8,%rsp                                                                                                                               0x0000000000400ea8 <+27>:    retq                                                                                                                                        End of assembler dump.                                                                                                                                                      (gdb) u*0x0000000000400e91                                                                                                                                                  0x0000000000400e91 in phase_1 ()                                                                                                                                            (gdb) disas                                                                                                                                                                 Dump of assembler code for function phase_1:                                                                                                                                   0x0000000000400e8d <+0>:     sub    $0x8,%rsp                                                                                                                            => 0x0000000000400e91 <+4>:     mov    $0x4023b0,%esi                                                                                                                          0x0000000000400e96 <+9>:     callq  0x40132b <strings_not_equal>                                                                                                            0x0000000000400e9b <+14>:    test   %eax,%eax                                                                                                                               0x0000000000400e9d <+16>:    je     0x400ea4 <phase_1+23>                                                                                                                   0x0000000000400e9f <+18>:    callq  0x40142a <explode_bomb>                                                                                                                 0x0000000000400ea4 <+23>:    add    $0x8,%rsp                                                                                                                               0x0000000000400ea8 <+27>:    retq                                                                                                                                        End of assembler dump.                                                                                                                                                      (gdb) x/s 0x4023b0                                                                                                                                                          0x4023b0:       "Border relations with Canada have never been better."                                                                                                      (gdb) ni 1                                                                                                                                                                  0x0000000000400e96 in phase_1 ()                                                                                                                                            (gdb) disas                                                                                                                                                                 Dump of assembler code for function phase_1:                                                                                                                                   0x0000000000400e8d <+0>:     sub    $0x8,%rsp                                                                                                                               0x0000000000400e91 <+4>:     mov    $0x4023b0,%esi                                                                                                                       => 0x0000000000400e96 <+9>:     callq  0x40132b <strings_not_equal>                                                                                                            0x0000000000400e9b <+14>:    test   %eax,%eax                                                                                                                               0x0000000000400e9d <+16>:    je     0x400ea4 <phase_1+23>                                                                                                                   0x0000000000400e9f <+18>:    callq  0x40142a <explode_bomb>                                                                                                                 0x0000000000400ea4 <+23>:    add    $0x8,%rsp                                                                                                                               0x0000000000400ea8 <+27>:    retq                                                                                                                                        End of assembler dump.                                                                                                                                                      (gdb) si                                                                                                                                                                    0x000000000040132b in strings_not_equal ()                                                                                                                                  (gdb) disas                                                                                                                                                                 Dump of assembler code for function strings_not_equal:                                                                                                                      => 0x000000000040132b <+0>:     push   %r12                                                                                                                                    0x000000000040132d <+2>:     push   %rbp                                                                                                                                    0x000000000040132e <+3>:     push   %rbx                                                                                                                                    0x000000000040132f <+4>:     mov    %rdi,%rbx                                                                                                                               0x0000000000401332 <+7>:     mov    %rsi,%rbp                                                                                                                               0x0000000000401335 <+10>:    callq  0x40130d <string_length>                                                                                                                0x000000000040133a <+15>:    mov    %eax,%r12d                                                                                                                              0x000000000040133d <+18>:    mov    %rbp,%rdi                                                                                                                               0x0000000000401340 <+21>:    callq  0x40130d <string_length>                                                                                                                0x0000000000401345 <+26>:    mov    $0x1,%edx                                                                                                                               0x000000000040134a <+31>:    cmp    %eax,%r12d                                                                                                                              0x000000000040134d <+34>:    jne    0x40138b <strings_not_equal+96>                                                                                                         0x000000000040134f <+36>:    movzbl (%rbx),%eax                                                                                                                             0x0000000000401352 <+39>:    test   %al,%al                                                                                                                                 0x0000000000401354 <+41>:    je     0x401378 <strings_not_equal+77>                                                                                                         0x0000000000401356 <+43>:    cmp    0x0(%rbp),%al                                                                                                                           0x0000000000401359 <+46>:    je     0x401362 <strings_not_equal+55>                                                                                                         0x000000000040135b <+48>:    jmp    0x40137f <strings_not_equal+84>                                                                                                         0x000000000040135d <+50>:    cmp    0x0(%rbp),%al                                                                                                                           0x0000000000401360 <+53>:    jne    0x401386 <strings_not_equal+91>                                                                                                         0x0000000000401362 <+55>:    add    $0x1,%rbx                                                                                                                               0x0000000000401366 <+59>:    add    $0x1,%rbp                                                                                                                               0x000000000040136a <+63>:    movzbl (%rbx),%eax                                                                                                                             0x000000000040136d <+66>:    test   %al,%al                                                                                                                                 0x000000000040136f <+68>:    jne    0x40135d <strings_not_equal+50>                                                                                                         0x0000000000401371 <+70>:    mov    $0x0,%edx                                                                                                                               0x0000000000401376 <+75>:    jmp    0x40138b <strings_not_equal+96>                                                                                                         0x0000000000401378 <+77>:    mov    $0x0,%edx                                                                                                                               0x000000000040137d <+82>:    jmp    0x40138b <strings_not_equal+96>                                                                                                         0x000000000040137f <+84>:    mov    $0x1,%edx                                                                                                                               0x0000000000401384 <+89>:    jmp    0x40138b <strings_not_equal+96>                                                                                                         0x0000000000401386 <+91>:    mov    $0x1,%edx                                                                                                                               0x000000000040138b <+96>:    mov    %edx,%eax                                                                                                                               0x000000000040138d <+98>:    pop    %rbx                                                                                                                                    0x000000000040138e <+99>:    pop    %rbp                                                                                                                                    0x000000000040138f <+100>:   pop    %r12                                                                                       ugyen@DESKTOP-I4JK545:/mnt/c/Users/user/Desktop/Ugyen Lhamo/ITS304/Bomb LAB/Assignment 1/Assignment 1/bomb003$ gdb bomb
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...

// Setting break point(b for break point).
(gdb) b phase_1  
Breakpoint 1 at 0x400e8d
(gdb) r // r is short form for run
Starting program: /mnt/c/Users/user/Desktop/Ugyen Lhamo/ITS304/Bomb LAB/Assignment 1/Assignment 1/bomb003/bomb
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
test // In the beginning We don't know the answer for phase_1 to defuse the bomb, so i kept test as the user input.

Breakpoint 1, 0x0000000000400e8d in phase_1 ()
(gdb) disas //disassemble phase_1
Dump of assembler code for function phase_1:
=> 0x0000000000400e8d <+0>:     sub    $0x8,%rsp // building stack with 8 bytes
   0x0000000000400e91 <+4>:     mov    $0x4023b0,%esi // The unknown value or string is moved from 0x4023b0 to %esi
   0x0000000000400e96 <+9>:     callq  0x40132b <strings_not_equal> // Here we know that the answer for phase_1 is in string if we think logically. 
   0x0000000000400e9b <+14>:    test   %eax,%eax
   0x0000000000400e9d <+16>:    je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:    callq  0x40142a <explode_bomb>
   0x0000000000400ea4 <+23>:    add    $0x8,%rsp
   0x0000000000400ea8 <+27>:    retq
End of assembler dump.
// if we want to point at mov function we point to that address like given below:
(gdb) u*0x0000000000400e91
0x0000000000400e91 in phase_1 ()
(gdb) disas
Dump of assembler code for function phase_1:
   0x0000000000400e8d <+0>:     sub    $0x8,%rsp
=> 0x0000000000400e91 <+4>:     mov    $0x4023b0,%esi
   0x0000000000400e96 <+9>:     callq  0x40132b <strings_not_equal>
   0x0000000000400e9b <+14>:    test   %eax,%eax
   0x0000000000400e9d <+16>:    je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:    callq  0x40142a <explode_bomb>
   0x0000000000400ea4 <+23>:    add    $0x8,%rsp
   0x0000000000400ea8 <+27>:    retq
End of assembler dump.

//  we can see that something is being moved in second line, so we take that hexa value to check the value that is being moved:
(gdb) x/s 0x4023b0
0x4023b0:       "Border relations with Canada have never been better."
(gdb) ni  //'ni'to go to next line
0x0000000000400e96 in phase_1 ()
(gdb) disas
Dump of assembler code for function phase_1:
   0x0000000000400e8d <+0>:     sub    $0x8,%rsp
   0x0000000000400e91 <+4>:     mov    $0x4023b0,%esi
=> 0x0000000000400e96 <+9>:     callq  0x40132b <strings_not_equal>
   0x0000000000400e9b <+14>:    test   %eax,%eax
   0x0000000000400e9d <+16>:    je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:    callq  0x40142a <explode_bomb>
   0x0000000000400ea4 <+23>:    add    $0x8,%rsp
   0x0000000000400ea8 <+27>:    retq
End of assembler dump.
(gdb) si //to get in inside the function <strings_not_equal>
0x000000000040132b in strings_not_equal ()
(gdb) disas
Dump of assembler code for function strings_not_equal:
=> 0x000000000040132b <+0>:     push   %r12
   0x000000000040132d <+2>:     push   %rbp
   0x000000000040132e <+3>:     push   %rbx
   0x000000000040132f <+4>:     mov    %rdi,%rbx
   0x0000000000401332 <+7>:     mov    %rsi,%rbp
   0x0000000000401335 <+10>:    callq  0x40130d <string_length>
   0x000000000040133a <+15>:    mov    %eax,%r12d
   0x000000000040133d <+18>:    mov    %rbp,%rdi
   0x0000000000401340 <+21>:    callq  0x40130d <string_length>
   0x0000000000401345 <+26>:    mov    $0x1,%edx
   0x000000000040134a <+31>:    cmp    %eax,%r12d
   0x000000000040134d <+34>:    jne    0x40138b <strings_not_equal+96>
   0x000000000040134f <+36>:    movzbl (%rbx),%eax
   0x0000000000401352 <+39>:    test   %al,%al
   0x0000000000401354 <+41>:    je     0x401378 <strings_not_equal+77>
   0x0000000000401356 <+43>:    cmp    0x0(%rbp),%al
   0x0000000000401359 <+46>:    je     0x401362 <strings_not_equal+55>
   0x000000000040135b <+48>:    jmp    0x40137f <strings_not_equal+84>
   0x000000000040135d <+50>:    cmp    0x0(%rbp),%al
   0x0000000000401360 <+53>:    jne    0x401386 <strings_not_equal+91>
   0x0000000000401362 <+55>:    add    $0x1,%rbx
   0x0000000000401366 <+59>:    add    $0x1,%rbp
   0x000000000040136a <+63>:    movzbl (%rbx),%eax
   0x000000000040136d <+66>:    test   %al,%al
   0x000000000040136f <+68>:    jne    0x40135d <strings_not_equal+50>
   0x0000000000401371 <+70>:    mov    $0x0,%edx
   0x0000000000401376 <+75>:    jmp    0x40138b <strings_not_equal+96>
   0x0000000000401378 <+77>:    mov    $0x0,%edx
   0x000000000040137d <+82>:    jmp    0x40138b <strings_not_equal+96>
   0x000000000040137f <+84>:    mov    $0x1,%edx
   0x0000000000401384 <+89>:    jmp    0x40138b <strings_not_equal+96>
   0x0000000000401386 <+91>:    mov    $0x1,%edx
   0x000000000040138b <+96>:    mov    %edx,%eax
   0x000000000040138d <+98>:    pop    %rbx
   0x000000000040138e <+99>:    pop    %rbp
   0x000000000040138f <+100>:   pop    %r12
   0x0000000000401391 <+102>:   retq
End of assembler dump.  
(gdb) disas
Dump of assembler code for function phase_1:
   0x0000000000400e8d <+0>:     sub    $0x8,%rsp
   0x0000000000400e91 <+4>:     mov    $0x4023b0,%esi
   0x0000000000400e96 <+9>:     callq  0x40132b <strings_not_equal>
=> 0x0000000000400e9b <+14>:    test   %eax,%eax //if eax is equal to 0, then it will jump <explode_bomb> or else it will call <explode_bomb>
   0x0000000000400e9d <+16>:    je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:    callq  0x40142a <explode_bomb>
   0x0000000000400ea4 <+23>:    add    $0x8,%rsp
   0x0000000000400ea8 <+27>:    retq
End of assembler dump.
//Initially my input was "test", lets check the information stored in the registers is right or not:
(gdb) i r
rax            0x1                 1 // Here, 1 and 1 is not equal to 0, it will call <explode_bomb>
rbx            0x4021e0            4202976
rcx            0x4                 4
rdx            0x1                 1
rsi            0x4023b0            4203440
rdi            0x4023e4            4203492
rbp            0x0                 0x0
rsp            0x7ffffffee240      0x7ffffffee240
r8             0x6037a0            6305696
r9             0x7c                124
r10            0xfffffffffffff6ed  -2323
r11            0x7fffff5e7400      140737477768192
r12            0x400c60            4197472
r13            0x7ffffffee340      140737488282432
r14            0x0                 0
r15            0x0                 0
rip            0x400e9b            0x400e9b <phase_1+14>
eflags         0x283               [ CF SF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0

(gdb) r
Starting program: /mnt/c/Users/user/Desktop/Ugyen Lhamo/ITS304/Bomb LAB/Assignment 1/Assignment 1/bomb003/bomb
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Border relations with Canada have never been better. // checking the answer that we got it from hexa number 0x4023b0 is correct or not
Breakpoint 2, 0x0000000000400e8d in phase_1 ()
(gdb) disas
Dump of assembler code for function phase_1:
   0x0000000000400e8d <+0>:     sub    $0x8,%rsp
=> 0x0000000000400e91 <+4>:     mov    $0x4023b0,%esi
   0x0000000000400e96 <+9>:     callq  0x40132b <strings_not_equal>
   0x0000000000400e9b <+14>:    test   %eax,%eax
   0x0000000000400e9d <+16>:    je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:    callq  0x40142a <explode_bomb>
   0x0000000000400ea4 <+23>:    add    $0x8,%rsp
   0x0000000000400ea8 <+27>:    retq
End of assembler dump.
(gdb) x/s 0x4023b0
0x4023b0:       "Border relations with Canada have never been better."
(gdb) disas
Dump of assembler code for function phase_1:
   0x0000000000400e8d <+0>:     sub    $0x8,%rsp
=> 0x0000000000400e91 <+4>:     mov    $0x4023b0,%esi
   0x0000000000400e96 <+9>:     callq  0x40132b <strings_not_equal>
   0x0000000000400e9b <+14>:    test   %eax,%eax
   0x0000000000400e9d <+16>:    je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:    callq  0x40142a <explode_bomb>
   0x0000000000400ea4 <+23>:    add    $0x8,%rsp
   0x0000000000400ea8 <+27>:    retq
End of assembler dump.
(gdb) u*0x0000000000400e9b
0x0000000000400e9b in phase_1 ()
(gdb) disas
Dump of assembler code for function phase_1:
   0x0000000000400e8d <+0>:     sub    $0x8,%rsp
   0x0000000000400e91 <+4>:     mov    $0x4023b0,%esi
   0x0000000000400e96 <+9>:     callq  0x40132b <strings_not_equal>
=> 0x0000000000400e9b <+14>:    test   %eax,%eax
   0x0000000000400e9d <+16>:    je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:    callq  0x40142a <explode_bomb>
   0x0000000000400ea4 <+23>:    add    $0x8,%rsp
   0x0000000000400ea8 <+27>:    retq
End of assembler dump.
(gdb) i r
rax            0x0                 0 //Her it is equal to 0, so it will not call <explode_bomb>
rbx            0x4021e0            4202976
rcx            0x34                52
rdx            0x0                 0
rsi            0x4023b0            4203440
rdi            0x4023e4            4203492
rbp            0x0                 0x0
rsp            0x7ffffffee240      0x7ffffffee240
r8             0x6037a0            6305696
r9             0x7c                124
r10            0xfffffffffffff6ed  -2323
r11            0x7fffff5e7400      140737477768192
r12            0x400c60            4197472
r13            0x7ffffffee340      140737488282432
r14            0x0                 0
r15            0x0                 0
rip            0x400e9b            0x400e9b <phase_1+14>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0

// Therefore, 'Border relations with Canada have never been better.' is a correct answer in phase_1 it will not call <explode_bomb>.

(gdb) d
Delete all breakpoints? (y or n) y
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /mnt/c/Users/user/Desktop/Ugyen Lhamo/ITS304/Bomb LAB/Assignment 1/Assignment 1/bomb003/bomb
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Border relations with Canada have never been better.
Phase 1 defused. How about the next one? // So, the bomb is defused in phase_1 successfully.
